/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lapositiva.services.productdirectory.products.infrastructure.inbound.controllers;

import com.lapositiva.services.productdirectory.products.infrastructure.inbound.controllers.utils.exception.ApiException;
import com.lapositiva.services.productdirectory.products.domain.model.PostProductResponse;
import com.lapositiva.services.productdirectory.products.domain.model.ProductRequest;
import com.lapositiva.services.productdirectory.products.domain.model.ProductResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-20T19:34:17.755954300-05:00[America/Lima]")
@Validated
@Controller
@Tag(name = "Product", description = "All about products")
public interface ProductApi {

    default ProductApiDelegate getDelegate() {
        return new ProductApiDelegate() {};
    }

    /**
     * POST /products : Allows you to create a product
     *
     * @param repositoryTypeCode Repository type code (required)
     * @param productRequest Product object (optional)
     * @return The resource was send successfully. (status code 201)
     *         or Invalid data supplied (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "create",
        summary = "Allows you to create a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The resource was send successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostProductResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<PostProductResponse>> create(
        @NotNull @Pattern(regexp = "^(mongodb|mysql)$") @Parameter(name = "repositoryTypeCode", description = "Repository type code", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "repositoryTypeCode", required = true) String repositoryTypeCode,
        @Parameter(name = "ProductRequest", description = "Product object") @Valid @RequestBody(required = false) Mono<ProductRequest> productRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().create(repositoryTypeCode, productRequest, exchange);
    }


    /**
     * DELETE /products/{id} : Allows you to delete a product
     *
     * @param repositoryTypeCode Repository type code (required)
     * @param id ID of the product to update (required)
     * @return The resource was send successfully. (status code 204)
     *         or Invalid data supplied (status code 400)
     *         or Invalid data supplied (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "delete",
        summary = "Allows you to delete a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The resource was send successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "409", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> delete(
        @NotNull @Pattern(regexp = "^(mongodb|mysql)$") @Parameter(name = "repositoryTypeCode", description = "Repository type code", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "repositoryTypeCode", required = true) String repositoryTypeCode,
        @Pattern(regexp = "^[A-Za-z0-9-]+$") @Size(min = 36, max = 36) @Parameter(name = "id", description = "ID of the product to update", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().delete(repositoryTypeCode, id, exchange);
    }


    /**
     * GET /products : Allows you to obtain all products
     *
     * @param repositoryTypeCode Repository type code (required)
     * @return The resource was send successfully. (status code 204)
     *         or The resource was send successfully. (status code 200)
     *         or Invalid data supplied (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "findAll",
        summary = "Allows you to obtain all products",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The resource was send successfully."),
            @ApiResponse(responseCode = "200", description = "The resource was send successfully.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductResponse.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<ProductResponse>>> findAll(
        @NotNull @Pattern(regexp = "^(mongodb|mysql)$") @Parameter(name = "repositoryTypeCode", description = "Repository type code", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "repositoryTypeCode", required = true) String repositoryTypeCode,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().findAll(repositoryTypeCode, exchange);
    }


    /**
     * GET /products/{id} : Allows you to obtain a product
     *
     * @param repositoryTypeCode Repository type code (required)
     * @param id ID of the product to update (required)
     * @return The resource was send successfully. (status code 204)
     *         or The resource was send successfully. (status code 200)
     *         or Invalid data supplied (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "findById",
        summary = "Allows you to obtain a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The resource was send successfully."),
            @ApiResponse(responseCode = "200", description = "The resource was send successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<ProductResponse>> findById(
        @NotNull @Pattern(regexp = "^(mongodb|mysql)$") @Parameter(name = "repositoryTypeCode", description = "Repository type code", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "repositoryTypeCode", required = true) String repositoryTypeCode,
        @Pattern(regexp = "^[A-Za-z0-9-]+$") @Size(min = 36, max = 36) @Parameter(name = "id", description = "ID of the product to update", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().findById(repositoryTypeCode, id, exchange);
    }


    /**
     * PUT /products/{id} : Allows you to update a product
     *
     * @param repositoryTypeCode Repository type code (required)
     * @param id ID of the product to update (required)
     * @param productRequest Product object (optional)
     * @return The resource was send successfully. (status code 204)
     *         or Invalid data supplied (status code 400)
     *         or Invalid data supplied (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "update",
        summary = "Allows you to update a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The resource was send successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "409", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiException.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> update(
        @NotNull @Pattern(regexp = "^(mongodb|mysql)$") @Parameter(name = "repositoryTypeCode", description = "Repository type code", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "repositoryTypeCode", required = true) String repositoryTypeCode,
        @Pattern(regexp = "^[A-Za-z0-9-]+$") @Size(min = 36, max = 36) @Parameter(name = "id", description = "ID of the product to update", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProductRequest", description = "Product object") @Valid @RequestBody(required = false) Mono<ProductRequest> productRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().update(repositoryTypeCode, id, productRequest, exchange);
    }

}
